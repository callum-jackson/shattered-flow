[gd_scene load_steps=11 format=3 uid="uid://ddwpj12cc2kxa"]

[ext_resource type="Script" uid="uid://52csodcyngum" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Shader" uid="uid://dqvt5ijsabinn" path="res://shaders/glass.gdshader" id="2_qhqgy"]
[ext_resource type="Texture2D" uid="uid://b2xfh5qnuwpws" path="res://assets/sprites/player.svg" id="3_qhqgy"]
[ext_resource type="Texture2D" uid="uid://c16dfaddqcgml" path="res://assets/sprites/player_shattered.svg" id="4_dqkch"]
[ext_resource type="AudioStream" uid="uid://da7hbyud3x3g7" path="res://assets/proprietary/shatter.wav" id="5_qlg0r"]

[sub_resource type="Shader" id="Shader_qlg0r"]
code = "shader_type canvas_item;
render_mode blend_premul_alpha;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

/*
  Liquid Glass (Godot 4.x, CanvasItem)
  - Screenspace refraction via SCREEN_TEXTURE
  - Optional normal map + animated noise flow
  - Fresnel rim + soft outline
  - Subtle tint + optional chromatic aberration
*/

// === MAIN / MASK TEXTURE ===
uniform sampler2D albedo_tex : source_color; // your sprite/polygon texture; alpha = mask

// === OPTIONAL MAPS ===
uniform bool  use_normal_map = true;
uniform sampler2D normal_tex : hint_normal;

uniform bool  use_noise = true;
uniform sampler2D noise_tex;

// === STRENGTH / BEHAVIOR ===
uniform float normal_strength    : hint_range(0.0, 3.0)  = 1.0;
uniform float refract_strength   : hint_range(0.0, 0.05) = 0.020;
uniform float flow_strength      : hint_range(0.0, 1.0)  = 0.20;
uniform vec2  flow_tiling                                = vec2(3.0, 3.0);
uniform vec2  flow_speed                                 = vec2(0.12, -0.07);

// === LOOK / STYLING ===
uniform vec4  glass_tint         : source_color          = vec4(0.85, 0.95, 1.0, 0.22);
uniform float fresnel_power      : hint_range(0.1, 8.0)  = 2.2;
uniform float rim_boost          : hint_range(0.0, 3.0)  = 0.60;
uniform float caustic_sparkle    : hint_range(0.0, 1.0)  = 0.15;
uniform float chrom_aberration   : hint_range(0.0, 0.01) = 0.002;

// === EDGE / OUTLINE ===
uniform float outline_thickness  : hint_range(0.0, 3.0)  = 1.1; // in texture UV pixels
uniform vec4  outline_color      : source_color          = vec4(1.0, 1.0, 1.0, 0.80);

// === UTILS ===
float get_mask_alpha(vec2 uv) {
    return texture(albedo_tex, uv).a;
}

float edge_factor(vec2 uv, float thickness) {
    vec2 texel = thickness / vec2(textureSize(albedo_tex, 0));
    float a  = get_mask_alpha(uv);
    float ax = get_mask_alpha(uv + vec2(texel.x, 0.0)) - get_mask_alpha(uv - vec2(texel.x, 0.0));
    float ay = get_mask_alpha(uv + vec2(0.0, texel.y)) - get_mask_alpha(uv - vec2(0.0, texel.y));
    float g  = clamp((abs(ax) + abs(ay)) * 0.5, 0.0, 1.0);
    return g * step(0.01, a);
}

vec3 fetch_normal(vec2 uv) {
    vec3 n = vec3(0.0, 0.0, 1.0);

    if (use_normal_map) {
        vec3 nn = texture(normal_tex, uv).xyz * 2.0 - 1.0;
        n.xy += nn.xy * normal_strength;
    }

    if (use_noise && flow_strength > 0.0) {
        vec2 flow_uv = uv * flow_tiling + flow_speed * TIME;
        float f = texture(noise_tex, flow_uv).r * 2.0 - 1.0;
        n.xy += f * flow_strength;
    }

    float xy2 = clamp(dot(n.xy, n.xy), 0.0, 1.0);
    n.z = sqrt(max(1.0 - xy2, 0.0));
    return normalize(n);
}

vec3 refract_sample_rgb(vec2 base_uv, vec2 dir, float strength) {
    float r = texture(SCREEN_TEXTURE, base_uv + dir * (strength + chrom_aberration)).r;
    float g = texture(SCREEN_TEXTURE, base_uv + dir * strength).g;
    float b = texture(SCREEN_TEXTURE, base_uv + dir * (strength - chrom_aberration)).b;
    return vec3(r, g, b);
}

void fragment() {
    vec4 base = texture(albedo_tex, UV);
    float mask = base.a;

    // If fully transparent mask, drop the pixel
    if (mask <= 0.001) {
        discard;
    }

    vec3 N = fetch_normal(UV);
    vec2 refract_dir = -N.xy; // flip sign if you prefer opposite bend
    vec2 screen_uv   = SCREEN_UV;

    vec3 refracted_rgb = refract_sample_rgb(screen_uv, refract_dir, refract_strength);

    float fresnel = pow(clamp(length(N.xy), 0.0, 1.0), fresnel_power);

    float sparkle = 0.0;
    if (use_noise && caustic_sparkle > 0.0) {
        vec2 sp_uv = UV * (flow_tiling * 2.0) + TIME * (flow_speed * 2.3);
        float n = texture(noise_tex, sp_uv).r;
        sparkle = smoothstep(0.88, 1.0, n) * fresnel * caustic_sparkle;
    }

    float edge = edge_factor(UV, outline_thickness);

    // Compose color
    vec3 col = refracted_rgb;
    col = mix(col, glass_tint.rgb, glass_tint.a);
    col += rim_boost * fresnel * 0.8;
    col = mix(col, outline_color.rgb, edge * outline_color.a);
    col += sparkle;

    // Premultiplied alpha
    float out_alpha = clamp(glass_tint.a + fresnel * 0.35 + edge * 0.35, 0.0, 1.0) * mask;
    COLOR = vec4(col * out_alpha, out_alpha);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tuyoq"]
shader = SubResource("Shader_qlg0r")
shader_parameter/use_normal_map = true
shader_parameter/use_noise = true
shader_parameter/normal_strength = 1.0
shader_parameter/refract_strength = 0.02
shader_parameter/flow_strength = 0.2
shader_parameter/flow_tiling = Vector2(3, 3)
shader_parameter/flow_speed = Vector2(0.12, -0.07)
shader_parameter/glass_tint = Color(0.85, 0.95, 1, 0.22)
shader_parameter/fresnel_power = 2.2
shader_parameter/rim_boost = 0.6
shader_parameter/caustic_sparkle = 0.15
shader_parameter/chrom_aberration = 0.002
shader_parameter/outline_thickness = 1.1
shader_parameter/outline_color = Color(1, 1, 1, 0.8)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dqkch"]
shader = ExtResource("2_qhqgy")
shader_parameter/albedo_tex = ExtResource("3_qhqgy")
shader_parameter/use_refraction = true
shader_parameter/refract_pixels = 8.0
shader_parameter/albedo_mix = 0.6
shader_parameter/master_opacity = 1.0
shader_parameter/glass_tint_color = Vector3(0.85, 0.95, 1)
shader_parameter/glass_tint = 0.18
shader_parameter/edge_normal_gain = 1.4
shader_parameter/bulge_gain = 0.8
shader_parameter/sphere_center = Vector2(0.5, 0.5)
shader_parameter/fresnel_power = 2.0
shader_parameter/rim_strength = 0.15
shader_parameter/min_px_for_refract = 1.25
shader_parameter/clamp_margin_uv = 0.002

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qlg0r"]
shader = ExtResource("2_qhqgy")
shader_parameter/albedo_tex = ExtResource("4_dqkch")
shader_parameter/use_refraction = true
shader_parameter/refract_pixels = 3.0
shader_parameter/albedo_mix = 0.5
shader_parameter/master_opacity = 1.0
shader_parameter/glass_tint_color = Vector3(0.85, 0.95, 1)
shader_parameter/glass_tint = 0.18
shader_parameter/edge_normal_gain = 1.4
shader_parameter/bulge_gain = 0.8
shader_parameter/sphere_center = Vector2(0.5, 0.5)
shader_parameter/fresnel_power = 2.0
shader_parameter/rim_strength = 0.15
shader_parameter/min_px_for_refract = 0.75
shader_parameter/clamp_margin_uv = 0.002

[sub_resource type="CircleShape2D" id="CircleShape2D_3vyb7"]
radius = 16.0

[node name="Player" type="Area2D"]
z_index = 3
material = SubResource("ShaderMaterial_tuyoq")
script = ExtResource("1_g2els")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_dqkch")
scale = Vector2(0.0625, 0.0625)
texture = ExtResource("3_qhqgy")

[node name="Sprite2DShattered" type="Sprite2D" parent="."]
visible = false
material = SubResource("ShaderMaterial_qlg0r")
scale = Vector2(0.0625, 0.0625)
texture = ExtResource("4_dqkch")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource("CircleShape2D_3vyb7")

[node name="ShatteredSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
